name: Build and Publish Model API

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # 1. Pobranie kodu
      - name: Check out the code
        uses: actions/checkout@v2

      # 2. Generowanie credentials.json z GitHub Secret
      - name: Create credentials.json
        run: |
          mkdir -p config
          echo '${{ secrets.GCP_CREDENTIALS }}' > config/credentials.json

      # 3. Instalacja Pythona i trening modelu
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r src/api/requirements.txt

      - name: Train model
        run: python src/train_model.py

      # 4. Logowanie do Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Budowanie obrazu Docker
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/diabetes-api:latest src/api/

      # 6. Testowanie API
      - name: Run Docker container for testing
        run: |
          echo "Uruchamianie kontenera testowego..."
          docker run -d -p 5000:5000 --name api_test ${{ secrets.DOCKER_USERNAME }}/diabetes-api:latest
          sleep 5  # Czekaj na uruchomienie API
          
          echo "üîç Sprawdzanie, czy API dzia≈Ça..."
          STATUS_CODE=$(curl -o /dev/null -s -w "%{http_code}\n" http://localhost:5000/)
          if [ "$STATUS_CODE" -ne 200 ]; then
            echo "API nie dzia≈Ça! Otrzymany status HTTP: $STATUS_CODE"
            docker logs api_test
            exit 1
          fi
          
          echo "API dzia≈Ça, testowanie endpointu /predict..."
          
          RESPONSE=$(curl -X POST http://localhost:5000/predict \
            -H "Content-Type: application/json" \
            -d '{
                  "bmi": 28.5, 
                  "blood_pressure": 120,
                  "cholesterol": 200,
                  "physactivity": 3,
                  "smoker": 0,
                  "age": 45,
                  "highbp": 1,
                  "highchol": 1,
                  "cholcheck": 1,
                  "stroke": 0,
                  "heartdiseaseorattack": 0,
                  "hvyalcoholconsump": 0,
                  "anyhealthcare": 1,
                  "nodocbccost": 0,
                  "genhlth": 3,
                  "menthlth": 5,
                  "physhlth": 7,
                  "diffwalk": 0,
                  "education": 4,
                  "income": 3,
                  "fruits": 1,
                  "veggies": 1,
                  "sex": 1
                }' -s)
          
          echo "Odpowied≈∫ API: $RESPONSE"
          
          # Sprawdzenie czy odpowied≈∫ API zawiera klucz "prediction"
          if echo "$RESPONSE" | grep -q '"prediction"'; then
            echo "API zwr√≥ci≈Ço poprawnƒÖ odpowied≈∫!"
          else
            echo "B≈ÇƒÖd! API nie zwr√≥ci≈Ço oczekiwanej odpowiedzi."
            docker logs api_test
            exit 1
          fi

      # 7. Wysy≈Çanie powiadomie≈Ñ e-mail w razie sukcesu
      - name: Send success email
        run: |
          curl -X POST "https://api.sendgrid.com/v3/mail/send" \
          -H "Authorization: Bearer ${{ secrets.EMAIL_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{
                "personalizations": [{"to": [{"email": "pawelpllukasiewicz@gmail.com"}]}],
                "from": {"email": "s24497@pjwstk.edu.pl"},
                "subject": "Deployment Successful",
                "content": [{"type": "text/plain", "value": "Your Docker image has been deployed successfully!"}]
              }'

      # 8. Publikacja na Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/diabetes-api:latest
